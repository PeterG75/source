/////////////////////////////////////////////////////////////
// Plugin Architecture Support Structures and APIs (v1.03) //
/////////////////////////////////////////////////////////////

/////////////////////////////////////////
// api version supported by the plugin //
/////////////////////////////////////////

// v1.00 (unsupported)
#if ((!defined(API_PLUGIN_VERSION_0100)) || (API_PLUGIN_VERSION_0100 != 0x0100))
#undef API_PLUGIN_VERSION_0100
#define API_PLUGIN_VERSION_0100		0x0100
#endif
// v1.01
#if ((!defined(API_PLUGIN_VERSION_0101)) || (API_PLUGIN_VERSION_0101 != 0x0101))
#undef API_PLUGIN_VERSION_0101
#define API_PLUGIN_VERSION_0101		0x0101
#endif
// v1.02
#if ((!defined(API_PLUGIN_VERSION_0102)) || (API_PLUGIN_VERSION_0102 != 0x0102))
#undef API_PLUGIN_VERSION_0102
#define API_PLUGIN_VERSION_0102		0x0102
#endif
// v1.03
#if ((!defined(API_PLUGIN_VERSION_0103)) || (API_PLUGIN_VERSION_0103 != 0x0103))
#undef API_PLUGIN_VERSION_0103
#define API_PLUGIN_VERSION_0103		0x0103
#endif

#ifndef API_PLUGIN_VERSION
#error API_PLUGIN_VERSION constant has not been defined for this plugin
#endif

// v1.01+
#if ((defined(API_PLUGIN_VERSION)) && (API_PLUGIN_VERSION >= API_PLUGIN_VERSION_0101))

////////////////////////////////
// plugin version information //
////////////////////////////////
typedef struct _PLUGIN_VERSION_INFORMATION
{
	WORD apiPluginVersion; // must be set to the required API_PLUGIN_VERSION
	LPSTR pluginDescription; // descriptive text about the plugin
	#if (API_PLUGIN_VERSION >= API_PLUGIN_VERSION_0103) // v1.03+
		DWORD pluginVersion; // plugin version - v1.01, i.e. 0x0101
	#else
		LPSTR pluginVersion; // plugin version - v1.01, i.e. "1.01"
	#endif
} PLUGIN_VERSION_INFORMATION;

////////////////////////////////////
// patching engine waiting events //
////////////////////////////////////

// patching engine has initialised
#define EVENT_PATCHINGENGINE_INITIALISED								01
// target process - resume process execution
#define EVENT_PATCHINGENGINE_TARGETPROCESS_RESUME						10
// target process - process has initialised
#define EVENT_PATCHINGENGINE_TARGETPROCESS_INITIALISED					11
// target process - child process has been found (if required)
#define EVENT_PATCHINGENGINE_TARGETPROCESS_CHILDPROCESS_INITIALISED		12
// target process - process is ready for memory patching
#define EVENT_PATCHINGENGINE_TARGETPROCESS_MEMORYPATCHING_READY			13
// target process - process memory patching has completed
#define EVENT_PATCHINGENGINE_TARGETPROCESS_MEMORYPATCHING_FINISHED		14
// module - ready for module patching
#define EVENT_PATCHINGENGINE_MODULE1_PATCHING_READY						20
#define EVENT_PATCHINGENGINE_MODULE2_PATCHING_READY						21
#define EVENT_PATCHINGENGINE_MODULE3_PATCHING_READY						22
#define EVENT_PATCHINGENGINE_MODULE4_PATCHING_READY						23
#define EVENT_PATCHINGENGINE_MODULE5_PATCHING_READY						24
// module - module patching is complete
#define EVENT_PATCHINGENGINE_MODULE1_PATCHING_FINISHED					30
#define EVENT_PATCHINGENGINE_MODULE2_PATCHING_FINISHED					31
#define EVENT_PATCHINGENGINE_MODULE3_PATCHING_FINISHED					32
#define EVENT_PATCHINGENGINE_MODULE4_PATCHING_FINISHED					33
#define EVENT_PATCHINGENGINE_MODULE5_PATCHING_FINISHED					34
// registry - ready for registry patching
#define EVENT_PATCHINGENGINE_REGISTRY1_PATCHING_READY					40
#define EVENT_PATCHINGENGINE_REGISTRY2_PATCHING_READY					41
#define EVENT_PATCHINGENGINE_REGISTRY3_PATCHING_READY					42
#define EVENT_PATCHINGENGINE_REGISTRY4_PATCHING_READY					43
#define EVENT_PATCHINGENGINE_REGISTRY5_PATCHING_READY					44
// registry - registry patching is complete
#define EVENT_PATCHINGENGINE_REGISTRY1_PATCHING_FINISHED				50
#define EVENT_PATCHINGENGINE_REGISTRY2_PATCHING_FINISHED				51
#define EVENT_PATCHINGENGINE_REGISTRY3_PATCHING_FINISHED				52
#define EVENT_PATCHINGENGINE_REGISTRY4_PATCHING_FINISHED				53
#define EVENT_PATCHINGENGINE_REGISTRY5_PATCHING_FINISHED				54

//////////////////////////////
// plugin support functions //
//////////////////////////////

// target process function declarations
typedef LPSTR (*FUNCTIONS_TARGETPROCESS_GETPROCESSFILENAME)(VOID);
typedef DWORD (*FUNCTIONS_TARGETPROCESS_GETPROCESSID)(VOID);
typedef HANDLE (*FUNCTIONS_TARGETPROCESS_GETPROCESSHANDLE)(VOID);
typedef DWORD (*FUNCTIONS_TARGETPROCESS_GETTHREADID)(VOID);
typedef HANDLE (*FUNCTIONS_TARGETPROCESS_GETTHREADHANDLE)(VOID);
typedef DWORD (*FUNCTIONS_TARGETPROCESS_GETPROCESSSESSIONID)(VOID);

typedef struct _PLUGIN_FUNCTIONS_TARGETPROCESS
{
	FUNCTIONS_TARGETPROCESS_GETPROCESSFILENAME GetProcessFilename;
	FUNCTIONS_TARGETPROCESS_GETPROCESSID GetProcessId;
	FUNCTIONS_TARGETPROCESS_GETPROCESSHANDLE GetProcessHandle;
	FUNCTIONS_TARGETPROCESS_GETTHREADID GetThreadId;
	FUNCTIONS_TARGETPROCESS_GETTHREADHANDLE GetThreadHandle;
	FUNCTIONS_TARGETPROCESS_GETPROCESSSESSIONID GetProcessSessionId;
} PLUGIN_FUNCTIONS_TARGETPROCESS;

// child process function declarations
typedef LPSTR (*FUNCTIONS_CHILDPROCESS_GETPROCESSFILENAME)(VOID);
typedef DWORD (*FUNCTIONS_CHILDPROCESS_GETPROCESSID)(VOID);
typedef HANDLE (*FUNCTIONS_CHILDPROCESS_GETPROCESSHANDLE)(VOID);
typedef DWORD (*FUNCTIONS_CHILDPROCESS_GETTHREADID)(VOID);
typedef HANDLE (*FUNCTIONS_CHILDPROCESS_GETTHREADHANDLE)(VOID);
typedef DWORD (*FUNCTIONS_CHILDPROCESS_GETPROCESSSESSIONID)(VOID);

// filled after the EVENT_PATCHINGENGINE_TARGETPROCESS_CHILDPROCESS_INITIALISED waiting event has been set
typedef struct _PLUGIN_FUNCTIONS_CHILDPROCESS
{
	FUNCTIONS_CHILDPROCESS_GETPROCESSFILENAME GetProcessFilename;
	FUNCTIONS_CHILDPROCESS_GETPROCESSID GetProcessId;
	FUNCTIONS_CHILDPROCESS_GETPROCESSHANDLE GetProcessHandle;
	#if (API_PLUGIN_VERSION >= API_PLUGIN_VERSION_0102) // v1.02+
		FUNCTIONS_CHILDPROCESS_GETTHREADID GetThreadId;
		FUNCTIONS_CHILDPROCESS_GETTHREADHANDLE GetThreadHandle;
		FUNCTIONS_CHILDPROCESS_GETPROCESSSESSIONID GetProcessSessionId;
	#endif
} PLUGIN_FUNCTIONS_CHILDPROCESS;

// waiting events function declarations
typedef LPSTR (*FUNCTIONS_WAITINGEVENTS_GETEVENTNAME)(DWORD dwEventId);
typedef BOOL (*FUNCTIONS_WAITINGEVENTS_WAITFOREVENT)(DWORD dwEventId);
typedef BOOL (*FUNCTIONS_WAITINGEVENTS_SETEVENT)(DWORD dwEventId);
typedef BOOL (*FUNCTIONS_WAITINGEVENTS_RESETEVENT)(DWORD dwEventId);

typedef struct _PLUGIN_FUNCTIONS_WAITINGEVENTS
{
	FUNCTIONS_WAITINGEVENTS_GETEVENTNAME GetEventName;
	FUNCTIONS_WAITINGEVENTS_WAITFOREVENT WaitForEvent;
	FUNCTIONS_WAITINGEVENTS_SETEVENT SetEvent;
	FUNCTIONS_WAITINGEVENTS_RESETEVENT ResetEvent;
} PLUGIN_FUNCTIONS_WAITINGEVENTS;

// other function declarations
typedef VOID (*FUNCTIONS_OTHERS_DISPLAYCONSOLEMESSAGE)(LPSTR lpMessage);
typedef BOOL (*FUNCTIONS_OTHERS_READMEMORYADDRESS)(HANDLE hProcess, DWORD dwMemoryAddress, DWORD dwNumberOfBytes, UCHAR* pMemoryBuffer, BOOL bAlterMemoryProtection);
typedef BOOL (*FUNCTIONS_OTHERS_WRITEMEMORYADDRESS)(HANDLE hProcess, DWORD dwMemoryAddress, DWORD dwNumberOfBytes, UCHAR* pMemoryBuffer, BOOL bAlterMemoryProtection);
typedef VOID (*FUNCTIONS_OTHERS_ABORTPATCHINGENGINE)(VOID);

typedef struct _PLUGIN_FUNCTIONS_OTHERS
{
	FUNCTIONS_OTHERS_DISPLAYCONSOLEMESSAGE DisplayConsoleMessage;
	FUNCTIONS_OTHERS_READMEMORYADDRESS ReadMemoryAddress;
	FUNCTIONS_OTHERS_WRITEMEMORYADDRESS WriteMemoryAddress;
} PLUGIN_FUNCTIONS_OTHERS;

// miscellaneous function declarations
typedef VOID (*FUNCTIONS_PLUGINHASINITIALISED)(VOID);
typedef DWORD (*FUNCTIONS_GETPLUGINSETTINGS)(VOID);
typedef DWORD (*FUNCTIONS_GETPLUGINARGUMENTCOUNT)(VOID);
typedef LPSTR (*FUNCTIONS_GETPLUGINARGUMENT)(DWORD dwArgumentIndex);

#define PLUGINSETTINGS_DEBUG		0x00000001

//////////////////////////////////
// plugin execution information //
//////////////////////////////////
typedef struct _PLUGIN_EXECUTION_INFORMATION
{
	PLUGIN_FUNCTIONS_TARGETPROCESS* functionsTargetProcess;
	PLUGIN_FUNCTIONS_CHILDPROCESS* functionsChildProcess;
	PLUGIN_FUNCTIONS_WAITINGEVENTS* functionsWaitingEvents;
	PLUGIN_FUNCTIONS_OTHERS* functionsOther;

	FUNCTIONS_PLUGINHASINITIALISED PluginHasInitialised;
	FUNCTIONS_GETPLUGINSETTINGS GetPluginSettings;
	FUNCTIONS_GETPLUGINARGUMENTCOUNT GetPluginArgumentCount;
	FUNCTIONS_GETPLUGINARGUMENT GetPluginArgument;
} PLUGIN_EXECUTION_INFORMATION;

///////////////////////////////
// compulsory plugin exports //
///////////////////////////////
typedef BOOL (*GETPLUGINVERSIONINFORMATION)(PLUGIN_VERSION_INFORMATION* pluginVersionInformation);
typedef BOOL (*EXECUTEPLUGIN)(PLUGIN_EXECUTION_INFORMATION* pluginExecutionInformation);
typedef LPSTR (*GETLASTPLUGINERROR)(VOID);

#endif