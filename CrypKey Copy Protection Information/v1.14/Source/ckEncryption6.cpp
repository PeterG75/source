#include "ckInfo.h"
#include "ckEncryption.h"
#include "ckEncryption6.h"
#include "..\..\..\_Shared Libraries\OpenSSL_BigNumberLibrary.h"
#include "..\..\..\_Shared Libraries\UtilitiesLibrary.h"

extern CUtilitiesLibrary ULib;

#define KEYS1_V6_MASTERKEY_ID			0x60000001
#define KEYS2_V6_MASTERKEY_ID			0x60000002
#define KEYS1_V6_SITECODE_ID			0x60000003
#define KEYS2_V6_SITECODE_ID			0x60000004
#define KEYS1_V6_SITEKEY_ID				0x60000005
#define KEYS2_V6_SITEKEY_ID				0x60000006
#define KEYS1_V6_CUSTOMINFOBYTES_ID		0x60000007
#define KEYS2_V6_CUSTOMINFOBYTES_ID		0x60000008
#define KEYS3_V6_CUSTOMINFOBYTES_ID		0x60000009

#define KEYS1_V7_ENTRYKEY_ID			0x70000001
#define KEYS2_V7_ENTRYKEY_ID			0x70000002
#define KEYS3_V7_ENTRYKEY_ID			0x70000003

#define KEYS1_V7_CEDLICENCE_ID			0x70000004
#define KEYS2_V7_CEDLICENCE_ID			0x70000005
#define KEYS3_V7_CEDLICENCE_ID			0x70000006

/*char* KEYS1_V6_MASTERKEY_ENCRYPT[] = 
{
	//"7F00C6A6F7DBFCE1BD1EAA976768978043BC4B7B776D4FC47CD1345BEC6C675B9B619A9C17293D83CA6E4C31A5E5EC5DE3C63C7325CDFEB4A52241299938EEAC7D67657899340986B84D4457238E4EA2121AC6B5B8DE3097065555855CA881835E31F33D768DCA67ADDD90782704D96AD01FB0E074CD12D388218EACFBA2C32C69"
};*/

/*char* KEYS2_V6_MASTERKEY_ENCRYPT[] = 
{
	//"8000FD6E8DCAB3F4A2063DF2332F5431AF18FFBA159FCBFF2ADBC406CA76BD846592CE973559462AEA60B3BD169A661CC176FE900BBFB228A2694004F0E54043C647E3E8A103C49D3C0B24C29D34505B9D47547F7E2CDF08914AD1620BE07C40046B9D57CD6BB28D1D1A3C6E68C3F39E861EA4073C6F1F2D176C04C6C003D980C603"
};*/

char* KEYS1_V6_MASTERKEY_DECRYPT[] = 
{
	"7F008E42728C4477A81640F6347FF5BAC8B8FCBBD46AD6B2A3007322101103BC8F13EA95A7CA43C3F031FA17D1FE1A4AAC7B01BA7C3C74302060DEDCB9F7AA9FE888B021755A198BE9D0D3BF35AB5CAB71844E4225314562F65E3987EFBBAECE3124F0B19186AEB80DADFC2D8BB51E9EFC65565D570EDFA8E8AC69CA7F357136C97F00C6A6F7DBFCE1BD1EAA976768978043BC4B7B776D4FC47CD1345BEC6C675B9B619A9C17293D83CA6E4C31A5E5EC5DE3C63C7325CDFEB4A52241299938EEAC7D67657899340986B84D4457238E4EA2121AC6B5B8DE3097065555855CA881835E31F33D768DCA67ADDD90782704D96AD01FB0E074CD12D388218EACFBA2C32C69"
};

char* KEYS2_V6_MASTERKEY_DECRYPT[] = 
{
	"8000DF42AC7C838C6B5674D02A1163463954E0BC0F559DF3206FFB8047CBA29AC00E8170BD9DF6ACA1144604619A761E2DA001129E021D98C80B513279879CFE856C74F3A08EA423D24FB48CEB5987024AD6247CEC55B896B6842ED36B893FD5884D485BD2634F117326963819D69E6F83AE66D15292C8170C3208B18C1D3950159F8000FD6E8DCAB3F4A2063DF2332F5431AF18FFBA159FCBFF2ADBC406CA76BD846592CE973559462AEA60B3BD169A661CC176FE900BBFB228A2694004F0E54043C647E3E8A103C49D3C0B24C29D34505B9D47547F7E2CDF08914AD1620BE07C40046B9D57CD6BB28D1D1A3C6E68C3F39E861EA4073C6F1F2D176C04C6C003D980C603"
};

char* KEYS1_V6_SITECODE_ENCRYPT[] =
{
	"0800EDA12BD3CDC2194B0800593A97A10AC1FD6B",
	"08008C3390C7092DD7E7080068F6E56FC238B6A9",
	"0800DD8C475DC43961CB08004415A55D27A7A79D",
	"0800C120747AC80D1A4D0800569A5625664F029B",
	"0800F48863CD6244B2690800408122532FF6ECE3",
	"0800D33E20A2D447711B08005617186268D45991",
	"0800FDD79299ACC0D6F708004D6CCC30B1C9FBCF",
	"0800E5B2BA89CE350539080049FC05196905837B",
	"0800DC6742B3CB0FD4790800770DE1E8908A0AA1",
	"0800A20E3DA48F97D23308004AA7A2921E052895",
	"0800F0CAB513A711A0AB080076DF43B5FA4CCB29",
	"08008113C25A3B93438308005DB867FBE2AE1FC5",
	"0800CD1B4020BE36745508005D62D0A0C263EEA3",
	"0800E03483E417E271E50800752D46600F1492E9",
	"0800FD0D13DB6D5BD59B08007D14B011EBCD74FD",
	"0800DA596C8D281417950800796404E387351D55",
	"0800EFD66A2545BBD76508005F12FAD3896EB367",
	"08008D58DFDC8983377B080074CDFEF11CD63DB3",
	"0800B8B43C7C51B3759308006FB89C586A256F0D",
	"0800F3B64623277900E708006F638DF8008662AF",
	"08008760E14B2F173CAF080040733099C1A8B0C5",
	"0800B76C8A0FEA0C5C81080071D299822A19285D",
	"08009D8F9D48867FE6D708007DEA7FB2CD8E221F",
	"0800A2F247B7B63742570800429954BFC5876087",
	"080083E7E9FBE3849DB908006E1CF907B38296DF",
	"0800B17F7DC62BFDE1B3080078423559A95417AF",
	"08009D0D7BEBB1D9556F0800660E613ECABC4881",
	"080096A27349D6224C4108006AD435FEEB1915AD",
	"0800AD9C00E14240975708004B99D2CD16971379",
	"080083163BEC3D3B750708007B64A414966D5C0B",
	"0800B5161B7D8000B579080064880AEE627BB4AD",
	"0800EEAA6EE2AA98AA71080061032549AE1EFE23"
};

char* KEYS2_V6_SITECODE_ENCRYPT[] =
{
	"0800B27CAAFB6BE3A37B0800B1EE8CD83C9191CB",
	"08008AD1120B1ACC6D8F080087C13B50626DF107",
	"0800FF9E74EFA4C471B70800C7514E1D50090A41",
	"0800DADF0D9D515363E70800F641E7E079FAD3A3",
	"0800FEB4E4A906DAA43F0800F707044521D9EA2D",
	"080081D31064134F37A90800AADA532366AABD69",
	"0800D901CBFC74BFEB810800D20560DE6C293EA9",
	"080081D27397ABA50D9B0800F12598F144BE42F9",
	"0800D2815E89D1FA01790800864C743AF40EE5F7",
	"0800FE9A5802120535AD0800924152BD3FA210AF",
	"0800DEF9390C06F3DDAB0800C6ADF87B23C9EBB7",
	"0800AE61CB7473BFFA290800C44D3A07C2E356B7",
	"08008A65A68DD6014F2D0800A1A6B412829E0D75",
	"0800D9005D0BB2C61D730800EA1D9A04BE26229B",
	"0800F6520A3EA4ED473F0800A69C20269CDCC305",
	"08008EC2329E05DFC9F10800DD7986A1290F4CFD",
	"08009481A8510D87C4B30800A17FDA719CD3F783",
	"0800856CF83A4A7D1CA70800D19C9E4319BDC32F",
	"08008D584E9372201F390800D68287689B400939",
	"08009A7BF96DA706CA710800F4E0D19AEB39382F",
	"0800F0F5D0123156E26F0800EDDC24966DCEACD1",
	"0800B9F2A4833F09351308009F80C95044C068BD",
	"0800C33E64AC19FFE0C10800C277BDFE8E885A89",
	"08008D1C383E4197465F0800D6A431CEDD4DB985",
	"0800D0163638B0BD28D30800FF569EA22FFE8D59",
	"080092EFBF61588287AB0800DAD42209FB2E93D7",
	"08009EA0E3A58ADA15130800D0AE6276794D4039",
	"0800DA08DA575413CF2B0800B42CABDE9190DC2B",
	"0800AD9775A42FB3A7930800F0537CD57DB13281",
	"0800B72D8DD29A20D2D90800FFF4C1D2CB42E475",
	"0800A6F98C3202BC3DAB0800FAB3B5F3C60243FD",
	"0800BCB97530FF65FBCD0800E8F9B1360625C803"
};

char* KEYS1_V6_SITECODE_DECRYPT[] =
{
	"080032DF39F32D3B481B0800593A97A10AC1FD6B",
	"080042AC917447EB1EB3080068F6E56FC238B6A9",
	"08000CA188CA1F77ADA308004415A55D27A7A79D",
	"080054E95799172D2C050800569A5625664F029B",
	"080002B14FA2DBDEF6D10800408122532FF6ECE3",
	"0800501682117D5F4F9308005617186268D45991",
	"0800095FFB1549B8B86F08004D6CCC30B1C9FBCF",
	"0800023705BF52C37F31080049FC05196905837B",
	"08000674BCC6785203F10800770DE1E8908A0AA1",
	"080008A4F7C90108287708004AA7A2921E052895",
	"080010CF6410C7A5770B080076DF43B5FA4CCB29",
	"080036B7B3FA12B8B2AB08005DB867FBE2AE1FC5",
	"080046FC01004DB76A8D08005D62D0A0C263EEA3",
	"08002706829AAC233F4D0800752D46600F1492E9",
	"08002E1234A47E69972308007D14B011EBCD74FD",
	"0800496EB304A0B8281D0800796404E387351D55",
	"08000E250428307CE85D08005F12FAD3896EB367",
	"08001008B3063E1EC4DB080074CDFEF11CD63DB3",
	"080053DF28C825BC029B08006FB89C586A256F0D",
	"08003B974544DE1DE98708006F638DF8008662AF",
	"0800137CECC0FB35C54F080040733099C1A8B0C5",
	"080009D3E3EF53EC44BD080071D299822A19285D",
	"08005E4A35A25808D20F08007DEA7FB2CD8E221F",
	"08002B149A10093672570800429954BFC5876087",
	"08001337CBECF388958908006E1CF907B38296DF",
	"08003155682BFB477E8B080078423559A95417AF",
	"08002FF41F7D1D8B935F0800660E613ECABC4881",
	"08001C3E401E3204EC1908006AD435FEEB1915AD",
	"08004AACF6F9EC9139F708004B99D2CD16971379",
	"08006D6D0E1C5AE0C0F708007B64A414966D5C0B",
	"080061451C6659D58089080064880AEE627BB4AD",
	"08005A01294BBAD47089080061032549AE1EFE23"
};

char* KEYS2_V6_SITECODE_DECRYPT[] =
{
	"080047C9CF697BCC81430800B1EE8CD83C9191CB",
	"0800034321EF938B9A97080087C13B50626DF107",
	"08005E236EDD5CE6F4530800C7514E1D50090A41",
	"08007C227E88C1A723D70800F641E7E079FAD3A3",
	"08005110CFAA2D96EEBF0800F707044521D9EA2D",
	"0800729EBFFFC242A6490800AADA532366AABD69",
	"08002B66B083FCC11F010800D20560DE6C293EA9",
	"0800048B1598D8C6AC930800F12598F144BE42F9",
	"08008126FF4B221A87690800864C743AF40EE5F7",
	"08005E7E2A050BCA2CAD0800924152BD3FA210AF",
	"0800B0F9AD9810585D030800C6ADF87B23C9EBB7",
	"080016F260287738FE310800C44D3A07C2E356B7",
	"0800516FA0C5AD17C2A50800A1A6B412829E0D75",
	"08000945CA6781810DBB0800EA1D9A04BE26229B",
	"08007CC2D01D5DA2EEAF0800A69C20269CDCC305",
	"0800924814FBF1F9F9F10800DD7986A1290F4CFD",
	"080095B83933ECD3C21B0800A17FDA719CD3F783",
	"0800202ECFD557D9E4970800D19C9E4319BDC32F",
	"0800995D0D1F491C52590800D68287689B400939",
	"08001CE419C06F660C110800F4E0D19AEB39382F",
	"08008D2F1659E1EC59EF0800EDDC24966DCEACD1",
	"080011FDFE25867C056308009F80C95044C068BD",
	"080048DB0E8147990BB50800C277BDFE8E885A89",
	"080058AF0E01D2EE1D030800D6A431CEDD4DB985",
	"0800F134DF80613AD2530800FF569EA22FFE8D59",
	"08002BA9B97192D0058B0800DAD42209FB2E93D7",
	"08005ED1A7990A88E66B0800D0AE6276794D4039",
	"08004D94045E4BF730830800B42CABDE9190DC2B",
	"08004D59DF3907529F5B0800F0537CD57DB13281",
	"08005BE3F6EDB3371AC50800FFF4C1D2CB42E475",
	"080010CD889542920DE30800FAB3B5F3C60243FD",
	"08007DEE2D279FC6CBDD0800E8F9B1360625C803"
};

char* KEYS1_V6_SITEKEY_ENCRYPT[] =
{
	"08009893EB9C410E0B3B0D001AF10085A35496A85C351D5991",
	"0800A0C92D3E62E369FD0D001C30E10379C829B2FFFFFCB99D",
	"0800A9123A5C16A9AF250D0012A3691416F0323427F7B94D79",
	"0800D31AB049614AD6A90D0018E1E6FB696F3B2AFA73CB5A99",
	"0800D87B03B6D64215AB0D0012DA37037B32D4CFB7D8DCA601",
	"08008D73ED0504AAFEE30D001FDE99830DC9ABC892DC6B0A25",
	"0800AAC2317BC0708C090D00143FFD26BFC24E11A0308821F1",
	"0800E3F6CD2E267528350D00118734E178C3536168509A56DB",
	"0800A31BD53193906B190D0019C17B338C7A160B52E9DADC79",
	"0800B281992FCACE6E210D00116FA61B5F7B0E582D424FDCAF",
	"0800E65A061B33E553050D0015FCF5A08C09A22547B73CB6E1",
	"0800B2213CB80AE1D30B0D001140C149CB370A2CC8A563C73B",
	"0800B8339567E1B22EA90D00170E4E6481C49B536E16ADCD21",
	"0800CB481463D80841FF0D001DC2C50E348B023E3F9F3A3B45",
	"0800A75003B9839D0A610D001A3F0B4F480ADF10F390CB96D9",
	"08009C064D7C8E5799BB0D0011223721443FBB69F59AA37557",
	"080090ED81AA44AD08530D0013773EB848998F6483E57EF767",
	"08008CBA66C0F0D0A57F0D0015F2E0C4E6DA32504D146741AB",
	"0800BE4122BB559155330D0013A1EDE0C8DAD4B94FE722FAC9",
	"0800D96F30ED11A6CB410D00108CBDE94D5CAF33864148DDF3",
	"0800FA136459F5EF3A510D001BB18F3BE11057FA35B0A27EFD",
	"0800E5A3B8745541DB8F0D0015B783B10AE4F47D53EFB2EF2D",
	"080085D898CE68E9B6D50D001704AD8C6B919D95E7C0994215",
	"0800F6BAE4249FEBA00F0D0019C33E6717A1D9A729E67B6DF7",
	"0800EB362C13326451A10D001B144526B15189585209C6DDDB",
	"08008E51FBEC623212AB0D001F63EE1AF29B483F9D8CD48C8B",
	"0800EF2FF8C84C6E0F8F0D001A2C8A1C3051D228F08ADAC053",
	"0800A322C046247DD7E90D00117A6F220DF3E6C248B28CDF41",
	"0800CB03A452305E582F0D0011CF26E88262F12B8713F968C9",
	"0800B2A5ACD2B684F2F10D001D7C0383CC718BA3F974FBAD65",
	"0800D5C2BB57F9D567ED0D00167515A6DDD0D8FD25C49E3BFD",
	"0800EB83B58DE127F2350D0015E41B5B7AB3B9AF0328F34C8D"
};

char* KEYS2_V6_SITEKEY_ENCRYPT[] =
{
	"08008AE44D02BBD6BBD90D002AD9FC1274994564D28A4B19F3",
	"0800C3DF9019E4E839810D0022E789D3C29E3141A62127389B",
	"0800993539A03AC6FED10D0022FD13ACBF1F3F4CCB16B92D9D",
	"0800F9A1D387188159DB0D0038125B5A056503CB22828D3F29",
	"0800DB08D70200EBC3630D003D6AFD2C237ABA4341081AE18D",
	"0800C7FCA03F94E5E2C90D0035478D8852A487221573F8F98B",
	"0800843ABFE44C6F550B0D0036D97841D7C0B3CFBBE995BD3D",
	"08009F66672D27B553A50D00283D8DC1AC29932FC30810E6DF",
	"080099BE52B90174D4BB0D003BCE795D353A357EFDAE42C881",
	"0800EC5C5139443B67990D002B06B9E26B448039F4594D3247",
	"0800E65524588CCD813D0D002E708BE2AFA0B0CA6C91F1CB19",
	"0800B2512EF10C3876890D00353FC86DA8173B19F99C83D217",
	"0800989B96B97D0233D50D002CC7EAF63E4A7AF6811C0D73C7",
	"0800EA1BBD64076AEB450D0035292A98340CD3D2CBB72A86DD",
	"0800D04988F7829C557F0D003C53229439EDC655AB68656611",
	"0800D547D8F891B1362B0D002C3D10DE7DDBC5780BF9CC1A73",
	"08009D18843254A096750D0022D613659A9F32921E80E93AFD",
	"0800C68172CDA1ADB88B0D002CBC42E60DDFE300935D866673",
	"08009D8B0943196305890D0024C5DF143189284F10C34033D1",
	"080088413FF6093624910D0031A416608A13D4BC7A57B7E9EB",
	"0800C431C59D445967A30D00238A88F62D09F111BA97258BAD",
	"0800895020E8E3C3FF430D0037C40395FEB046760125DD68F3",
	"0800D6CB28A19E2F4E190D003CD63BA41485014FE15DE0288B",
	"0800BA9A83DDE367787B0D0032CF29CBEE8D5B7AC16F88A027",
	"080084CB1F82C2799C550D002691F107D99F5A3911E92B040B",
	"0800C0675741525E22730D00303755B7AAFD3737D751777343",
	"0800BEA54F59A29465E50D0023A6A4DFD791BDC75916C91003",
	"0800FA01DF6558ADBCF70D003F4209A3396120BA7A4AAA93B5",
	"0800FB6BF2B1E3A47B010D0035C7248592373BA00806D98527",
	"0800FA3319CFF73C62230D002FBD98747E7BBE40A670B40B53",
	"08009E340D216A7528AD0D0039B6F3CCAC666663CBF074B5D5",
	"0800D62BC151888D050D0D0024F5F836137D068B613B36A2E9"
};

char* KEYS1_V6_SITEKEY_DECRYPT[] =
{
	"0D000E54F1F302DEACF153C1832AFB0D001AF10085A35496A85C351D5991",
	"0D000F9AA82B2F77CC19DC8C47D6550D001C30E10379C829B2FFFFFCB99D",
	"0D00022A425E2919B8D04746AE60450D0012A3691416F0323427F7B94D79",
	"0D000A1370BB9164AB9E23597914990D0018E1E6FB696F3B2AFA73CB5A99",
	"0D000E967B6EF01013A43CF0ECA9530D0012DA37037B32D4CFB7D8DCA601",
	"0D00101B88B2A02C638F556798254B0D001FDE99830DC9ABC892DC6B0A25",
	"0D001416D7EA7F0BD021EEE0911AB90D00143FFD26BFC24E11A0308821F1",
	"0C009188DB59C52625BE940CAF4D0D00118734E178C3536168509A56DB",
	"0D0013885B30F431C99A806AD8BE850D0019C17B338C7A160B52E9DADC79",
	"0D00071D96DF7EE8BF7DAAB8F5F9690D00116FA61B5F7B0E582D424FDCAF",
	"0D0005A1FEC282A185F109293B112D0D0015FCF5A08C09A22547B73CB6E1",
	"0D000DDD30694BECD73A2B85D63BF30D001140C149CB370A2CC8A563C73B",
	"0D00122AE33C8E253FD1A8ABEB25590D00170E4E6481C49B536E16ADCD21",
	"0D000F79E482B83433F2CB2CD64E330D001DC2C50E348B023E3F9F3A3B45",
	"0D00147F45A3C0745900449587DA990D001A3F0B4F480ADF10F390CB96D9",
	"0D000145D58B1A7FFFA02AD60448330D0011223721443FBB69F59AA37557",
	"0D0008B7DE80A07793622303EA345B0D0013773EB848998F6483E57EF767",
	"0D0007CF5C8C788838A7F7E562857F0D0015F2E0C4E6DA32504D146741AB",
	"0D0011AB77E961DD29607982E66FFB0D0013A1EDE0C8DAD4B94FE722FAC9",
	"0D000B7DD00AA46B71D47EE5137F210D00108CBDE94D5CAF33864148DDF3",
	"0D00172CA88EB3F72FA823595C92F10D001BB18F3BE11057FA35B0A27EFD",
	"0D00119F11A194D69551A7ADF9BA8F0D0015B783B10AE4F47D53EFB2EF2D",
	"0D00042990D57780B7E3327B545E1D0D001704AD8C6B919D95E7C0994215",
	"0D0014B1702A08B56539A3B5A1B3FF0D0019C33E6717A1D9A729E67B6DF7",
	"0D001972E6B08EB492249D2A3DC7F10D001B144526B15189585209C6DDDB",
	"0D001723328EB6DAA6BB200F6419030D001F63EE1AF29B483F9D8CD48C8B",
	"0D000D3035EB29C2F941102A71A8370D001A2C8A1C3051D228F08ADAC053",
	"0D000E58536F643F1B3C47E5932CB90D00117A6F220DF3E6C248B28CDF41",
	"0D000C7284B63A1D8D5934AFDC30CF0D0011CF26E88262F12B8713F968C9",
	"0D00077CA7566E4998C1DEBD1650910D001D7C0383CC718BA3F974FBAD65",
	"0D000378870697E7554449250D64950D00167515A6DDD0D8FD25C49E3BFD",
	"0D001416FE97E3E437B7907980D9210D0015E41B5B7AB3B9AF0328F34C8D"
};

char* KEYS2_V6_SITEKEY_DECRYPT[] =
{
	"0D001F31057223947B22D11EE5E6C10D002AD9FC1274994564D28A4B19F3",
	"0D001DBA4F2E7ED1F458DE3F6D55010D0022E789D3C29E3141A62127389B",
	"0D00065A58FE227D8FEC134E9700A10D0022FD13ACBF1F3F4CCB16B92D9D",
	"0D000A2C74769FAE8A2B3EA919C72F0D0038125B5A056503CB22828D3F29",
	"0D000E5D2BF624BFD646B178148AEB0D003D6AFD2C237ABA4341081AE18D",
	"0D00248BFAB5C7F37003F57FB0E7390D0035478D8852A487221573F8F98B",
	"0D002BAC2F42EA1F9ACE7A55B1C3830D0036D97841D7C0B3CFBBE995BD3D",
	"0D00277B254881F7F881212E3E767D0D00283D8DC1AC29932FC30810E6DF",
	"0D003A9B21D3B1D27A8C7890DF05EF0D003BCE795D353A357EFDAE42C881",
	"0D00066F51C7C6DA12E1A2591B45990D002B06B9E26B448039F4594D3247",
	"0D00144F4B34773C35FAB27E1C6F150D002E708BE2AFA0B0CA6C91F1CB19",
	"0D002DBF38AD4C531F5BD5DC518C090D00353FC86DA8173B19F99C83D217",
	"0D001D50C513486F14AAC17A43BFDD0D002CC7EAF63E4A7AF6811C0D73C7",
	"0D00107ACA21AE27A4A3220C672E2D0D0035292A98340CD3D2CBB72A86DD",
	"0D00178520ABCAE20C1F6982D20C1F0D003C53229439EDC655AB68656611",
	"0D002096098DC37C83E487B7CEF8330D002C3D10DE7DDBC5780BF9CC1A73",
	"0D001A4D418C567ED48464AFD884290D0022D613659A9F32921E80E93AFD",
	"0D000F350BB7E7E371B8325C13F8330D002CBC42E60DDFE300935D866673",
	"0D001E0FD12B41291588A5C552734D0D0024C5DF143189284F10C34033D1",
	"0D0003458E6140D1B0CCDF00E0E0010D0031A416608A13D4BC7A57B7E9EB",
	"0D001CAD7FE4B8130201DAC0704DC30D00238A88F62D09F111BA97258BAD",
	"0D0034740275ADB8EA49457DDC0F8B0D0037C40395FEB046760125DD68F3",
	"0D003740E4423470458C647870C5490D003CD63BA41485014FE15DE0288B",
	"0D0002EAC02880AB8729D219698E9B0D0032CF29CBEE8D5B7AC16F88A027",
	"0D001F0A21308F12AD5219FA484ABD0D002691F107D99F5A3911E92B040B",
	"0D0023F6C4499779FAA1E2D02632C30D00303755B7AAFD3737D751777343",
	"0D001804C1FF1EF29658648C8A8FCD0D0023A6A4DFD791BDC75916C91003",
	"0D0022EB317EBC1754BA0206A1C7470D003F4209A3396120BA7A4AAA93B5",
	"0D001023A3CFC3EAD641D8FD19C3410D0035C7248592373BA00806D98527",
	"0D0016F940487B91A99EF8C1DB440B0D002FBD98747E7BBE40A670B40B53",
	"0D002D5B385982193F5AC0F38400250D0039B6F3CCAC666663CBF074B5D5",
	"0D0020E600F198623EA39109256CC50D0024F5F836137D068B613B36A2E9"
};

// "7F0079949408995009EBB91ADF17095CF05F811CCDA0424EC5DBBC38C778A3FF18919E8EC71B8F4C3996C6E96E4EC5E1CFB3B6311B324153BBE76A53624795BF5C6C7770D45CCAFB5695B51E603EF576DCD9BF6A87EB65EB19835D2E7447297279557802A8060A47D6ADF31CDFA856FDAF147EA5DEC5847DEE043A55288953EB8D800097AE710C5D411528143E84A893BF7E995D3CF1E8CDDC29D794880BF437A935191E3E1922F1B6D652675036FD629C11932C2431D8620774CFDE1C4CBF7E04545882E11AAD53C57BDEB32777DC48E7EC14770324380C275A90C1E2A3DECAD5A6C3DB7A30DF4A43469ED09A8E06F1E8E4A02DEAF2B885A88F6D2B4A3D9A70D9CDC34000018B03D0158FA9EE09963D199E0D808B719E9BA3810E130D9218387038720240B1B64E0ADADE3086F2B4FE964A4B73B64623277900E70CDD7DF17877A1CFBA774100624D1C068C9561A82EE64C0ADB354BBA1C720B11BB91612D02DF5B1AC211559EE7B6E1006FFFE9FFBA543CA00E7D006AD1EEBC5768B72342BE68D97B21F08B0E153F006C509951673DD392536A39385E8F2ADD24E45D28A6B46734F6DEBB755E8ED8065CC2C9E3D35364F2B01A34F5AA881C00AD8A09CF37E293C7CA2E0C1669DCED410057A0A5A6A8FAB89F5D6F6EC1A41C31EB606D47ED335230E4F7B2EA3C0FCBA34AE1EEE9AEC3AE620BFDB0EF30660618692141E2C7F47CBCEC622423C66BA780FFF141002F4944F48EB8C4BAF5F4AA5D34FBE1915D360E5844C43ECB1309D873D19F48D23FE3EBBE30CB4F82D5AA8280949C2958129ECAA5E650125C5BFDB190E1DCF13F6600048000"
char* KEYS_V6_CUSTOMINFOBYTES_DECRYPT[] =
{
	"410057A0A5A6A8FAB89F5D6F6EC1A41C31EB606D47ED335230E4F7B2EA3C0FCBA34AE1EEE9AEC3AE620BFDB0EF30660618692141E2C7F47CBCEC622423C66BA780FFF14100624D1C068C9561A82EE64C0ADB354BBA1C720B11BB91612D02DF5B1AC211559EE7B6E1006FFFE9FFBA543CA00E7D006AD1EEBC5768B72342BE68D97B21F08B0E15",
	"3F006C509951673DD392536A39385E8F2ADD24E45D28A6B46734F6DEBB755E8ED8065CC2C9E3D35364F2B01A34F5AA881C00AD8A09CF37E293C7CA2E0C1669DCED4000018B03D0158FA9EE09963D199E0D808B719E9BA3810E130D9218387038720240B1B64E0ADADE3086F2B4FE964A4B73B64623277900E70CDD7DF17877A1CFBA77",
	"000041002F4944F48EB8C4BAF5F4AA5D34FBE1915D360E5844C43ECB1309D873D19F48D23FE3EBBE30CB4F82D5AA8280949C2958129ECAA5E650125C5BFDB190E1DCF13F66"
};

// "7F0079949408995009EBB91ADF17095CF05F811CCDA0424EC5DBBC38C778A3FF18919E8EC71B8F4C3996C6E96E4EC5E1CFB3B6311B324153BBE76A53624795BF5C6C7770D45CCAFB5695B51E603EF576DCD9BF6A87EB65EB19835D2E7447297279557802A8060A47D6ADF31CDFA856FDAF147EA5DEC5847DEE043A55288953EB8D800097AE710C5D411528143E84A893BF7E995D3CF1E8CDDC29D794880BF437A935191E3E1922F1B6D652675036FD629C11932C2431D8620774CFDE1C4CBF7E04545882E11AAD53C57BDEB32777DC48E7EC14770324380C275A90C1E2A3DECAD5A6C3DB7A30DF4A43469ED09A8E06F1E8E4A02DEAF2B885A88F6D2B4A3D9A70D9CDC34000018B03D0158FA9EE09963D199E0D808B719E9BA3810E130D9218387038720240B1B64E0ADADE3086F2B4FE964A4B73B64623277900E70CDD7DF17877A1CFBA774100624D1C068C9561A82EE64C0ADB354BBA1C720B11BB91612D02DF5B1AC211559EE7B6E1006FFFE9FFBA543CA00E7D006AD1EEBC5768B72342BE68D97B21F08B0E153F006C509951673DD392536A39385E8F2ADD24E45D28A6B46734F6DEBB755E8ED8065CC2C9E3D35364F2B01A34F5AA881C00AD8A09CF37E293C7CA2E0C1669DCED410057A0A5A6A8FAB89F5D6F6EC1A41C31EB606D47ED335230E4F7B2EA3C0FCBA34AE1EEE9AEC3AE620BFDB0EF30660618692141E2C7F47CBCEC622423C66BA780FFF141002F4944F48EB8C4BAF5F4AA5D34FBE1915D360E5844C43ECB1309D873D19F48D23FE3EBBE30CB4F82D5AA8280949C2958129ECAA5E650125C5BFDB190E1DCF13F6600048000"
char* KEYS_V7_ENTRYKEY_DECRYPT[] =
{
	"410057A0A5A6A8FAB89F5D6F6EC1A41C31EB606D47ED335230E4F7B2EA3C0FCBA34AE1EEE9AEC3AE620BFDB0EF30660618692141E2C7F47CBCEC622423C66BA780FFF14100624D1C068C9561A82EE64C0ADB354BBA1C720B11BB91612D02DF5B1AC211559EE7B6E1006FFFE9FFBA543CA00E7D006AD1EEBC5768B72342BE68D97B21F08B0E15",
	"3F006C509951673DD392536A39385E8F2ADD24E45D28A6B46734F6DEBB755E8ED8065CC2C9E3D35364F2B01A34F5AA881C00AD8A09CF37E293C7CA2E0C1669DCED4000018B03D0158FA9EE09963D199E0D808B719E9BA3810E130D9218387038720240B1B64E0ADADE3086F2B4FE964A4B73B64623277900E70CDD7DF17877A1CFBA77",
	"000041002F4944F48EB8C4BAF5F4AA5D34FBE1915D360E5844C43ECB1309D873D19F48D23FE3EBBE30CB4F82D5AA8280949C2958129ECAA5E650125C5BFDB190E1DCF13F66"
};

// "800035F5FA21F7E0DFAC76FBA9BFE8F3BD03D281AFE0768EC3296D68C609A02502AAD610671FE8D5D49EE327004C9D7918FB3D53AC6AEDCF31C61D1BF4CC75491514827AC52700B2A1C63572BACDB35B5ABE1C9510BD74DAA6E936A3477F02B1CEF21532E0951070A66AD87BAF944BE5CBF595743CB14E6C96E977E82E26295BD4218000942AD21E8AE88163E9EB3ED99F05C3A67AEE21C021F210235E07ACB111C137F4A1B05C1A917D4B13FAB391E4423AAAD96ECF89CAB557E58F85D1B2B4129D83ECF95B67E2F6EA707366F79A66121717BD7D43785218E9B29622A8C455CDB1E5091046365B53F56AE74AE4AE4C8F746F4D77E1F40BC5051E775F487E11E1B5B1ED3F000A98DF5E2074DF2978F9583FC87B4ED02438D6B20C5BD956BCFCF3F3B9260C5C5C172C74037ACC4C41C5E839D4C12092CA3362C51504EF3055EFF6E3C32D3F42000DFB56C0BF2F08D61D65978F5A82B13740179756CDC33CB70B4689AC119D76CA0CD53E56F2218C68EAF6F78B99CDA72D28B5EDDE7233C5C04F0E976EED366143D9D33F0007DD636B8B412789193B710AE16D96B046D182C023190B57697111FE2924AB6985D0DCCE94D6580E8C0A4BC7C5C55FF26DD287624CE379F07ECB953E4B9FFB41003E15CE405CC861DA549F85555D49C8E8C96A1D69F7A421133F7EA98F2E101518152CF16B673B7E198C083D87B0CA7D715D3B76666276C3B540CD71C250287FE313420001473D241721029845854475D5FDCF58DA6CC2AC06F5FFF649EB99ABD801B534C5C697C2960E1B896C956FE9675113610F92B6CA9244534E6D3574836002042675AC00048000"
char* KEYS_V7_CEDLICENCE_DECRYPT[] =
{
	"41003E15CE405CC861DA549F85555D49C8E8C96A1D69F7A421133F7EA98F2E101518152CF16B673B7E198C083D87B0CA7D715D3B76666276C3B540CD71C250287FE313420001473D241721029845854475D5FDCF58DA6CC2AC06F5FFF649EB99ABD801B534C5C697C2960E1B896C956FE9675113610F92B6CA9244534E6D3574836002042675AC",
	"3F0007DD636B8B412789193B710AE16D96B046D182C023190B57697111FE2924AB6985D0DCCE94D6580E8C0A4BC7C5C55FF26DD287624CE379F07ECB953E4B9FFB41003E15CE405CC861DA549F85555D49C8E8C96A1D69F7A421133F7EA98F2E101518152CF16B673B7E198C083D87B0CA7D715D3B76666276C3B540CD71C250287FE313",
	"0000420001473D241721029845854475D5FDCF58DA6CC2AC06F5FFF649EB99ABD801B534C5C697C2960E1B896C956FE9675113610F92B6CA9244534E6D3574836002042675AC00048000"
};

///////////////////////////////////////////////////////////////
// retrieve the required key elements from the specified key //
///////////////////////////////////////////////////////////////
bool getDecryptBIGNUM(unsigned long keysId, unsigned long keyId, BIGNUM** bnP, BIGNUM** bnM)
{
	if (keyId >= 0x20) return false;

	char* keyString = NULL;
	if (keysId == KEYS1_V6_MASTERKEY_ID) keyString = KEYS1_V6_MASTERKEY_DECRYPT[0];
	else if (keysId == KEYS2_V6_MASTERKEY_ID) keyString = KEYS2_V6_MASTERKEY_DECRYPT[0];
	else if (keysId == KEYS1_V6_SITECODE_ID) keyString = KEYS1_V6_SITECODE_DECRYPT[keyId];
	else if (keysId == KEYS2_V6_SITECODE_ID) keyString = KEYS2_V6_SITECODE_DECRYPT[keyId];
	else if (keysId == KEYS1_V6_SITEKEY_ID) keyString = KEYS1_V6_SITEKEY_DECRYPT[keyId];
	else if (keysId == KEYS2_V6_SITEKEY_ID) keyString = KEYS2_V6_SITEKEY_DECRYPT[keyId];
	else if (keysId == KEYS1_V6_CUSTOMINFOBYTES_ID) keyString = KEYS_V6_CUSTOMINFOBYTES_DECRYPT[0];
	else if (keysId == KEYS2_V6_CUSTOMINFOBYTES_ID) keyString = KEYS_V6_CUSTOMINFOBYTES_DECRYPT[1];
	else if (keysId == KEYS3_V6_CUSTOMINFOBYTES_ID) keyString = KEYS_V6_CUSTOMINFOBYTES_DECRYPT[2];
	else if (keysId == KEYS1_V7_ENTRYKEY_ID) keyString = KEYS_V7_ENTRYKEY_DECRYPT[0];
	else if (keysId == KEYS2_V7_ENTRYKEY_ID) keyString = KEYS_V7_ENTRYKEY_DECRYPT[1];
	else if (keysId == KEYS3_V7_ENTRYKEY_ID) keyString = KEYS_V7_ENTRYKEY_DECRYPT[2];
	else if (keysId == KEYS1_V7_CEDLICENCE_ID) keyString = KEYS_V7_CEDLICENCE_DECRYPT[0];
	else if (keysId == KEYS2_V7_CEDLICENCE_ID) keyString = KEYS_V7_CEDLICENCE_DECRYPT[1];
	else if (keysId == KEYS3_V7_CEDLICENCE_ID) keyString = KEYS_V7_CEDLICENCE_DECRYPT[2];

	if (!ULib.StringLibrary.isString(keyString, 1)) return false;

	char* tempBuffer = (char*)ULib.HeapLibrary.allocPrivateHeap();
	int currentOffset = 0;
	int currentLength = 0;

	// bnP
	currentLength = ULib.StringLibrary.getBYTEFromString((char*)&keyString[currentOffset], true);
	currentOffset += 4;
	currentLength *= 2;
	ZeroMemory(tempBuffer, ULib.HeapLibrary.DEFAULT_ALLOC_SIZE);
	ULib.StringLibrary.copyString(tempBuffer, (char*)&keyString[currentOffset], currentLength);
	if (bnP != NULL) BN_hex2bn(bnP, tempBuffer);
	currentOffset += currentLength;

	// bnM
	currentLength = ULib.StringLibrary.getBYTEFromString((char*)&keyString[currentOffset], true);
	currentOffset += 4;
	currentLength *= 2;
	ZeroMemory(tempBuffer, ULib.HeapLibrary.DEFAULT_ALLOC_SIZE);
	ULib.StringLibrary.copyString(tempBuffer, (char*)&keyString[currentOffset], currentLength);
	if (bnM != NULL) BN_hex2bn(bnM, tempBuffer);
	currentOffset += currentLength;

	ULib.HeapLibrary.freePrivateHeap(tempBuffer);
	return true;
}

///////////////////////////////////////////////////////////////
// retrieve the required key elements from the specified key //
///////////////////////////////////////////////////////////////
bool getEncryptBIGNUM(unsigned long keysId, unsigned long keyId, BIGNUM** bnP, BIGNUM** bnM)
{
	if (keyId >= 0x20) return false;

	char* keyString = NULL;
	if (keysId == KEYS1_V6_SITECODE_ID) keyString = KEYS1_V6_SITECODE_ENCRYPT[keyId];
	else if (keysId == KEYS2_V6_SITECODE_ID) keyString = KEYS2_V6_SITECODE_ENCRYPT[keyId];
	else if (keysId == KEYS1_V6_SITEKEY_ID) keyString = KEYS1_V6_SITEKEY_ENCRYPT[keyId];
	else if (keysId == KEYS2_V6_SITEKEY_ID) keyString = KEYS2_V6_SITEKEY_ENCRYPT[keyId];
	if (!ULib.StringLibrary.isString(keyString, 1)) return false;

	char* tempBuffer = (char*)ULib.HeapLibrary.allocPrivateHeap();
	int currentOffset = 0;
	int currentLength = 0;

	// bnP
	currentLength = ULib.StringLibrary.getBYTEFromString((char*)&keyString[currentOffset], true);
	currentOffset += 4;
	currentLength *= 2;
	ZeroMemory(tempBuffer, ULib.HeapLibrary.DEFAULT_ALLOC_SIZE);
	ULib.StringLibrary.copyString(tempBuffer, (char*)&keyString[currentOffset], currentLength);
	if (bnP != NULL) BN_hex2bn(bnP, tempBuffer);
	currentOffset += currentLength;

	// bnM
	currentLength = ULib.StringLibrary.getBYTEFromString((char*)&keyString[currentOffset], true);
	currentOffset += 4;
	currentLength *= 2;
	ZeroMemory(tempBuffer, ULib.HeapLibrary.DEFAULT_ALLOC_SIZE);
	ULib.StringLibrary.copyString(tempBuffer, (char*)&keyString[currentOffset], currentLength);
	if (bnM != NULL) BN_hex2bn(bnM, tempBuffer);
	currentOffset += currentLength;

	ULib.HeapLibrary.freePrivateHeap(tempBuffer);
	return true;
}

// returns the offset and revised length key stream
unsigned char* determineKey6StreamOffset(unsigned char* keyStream, unsigned long* keyStreamLength)
{
	if ((keyStream == NULL) || (keyStreamLength == NULL)) return NULL;
	if (keyStream[1] > 2) return NULL;

	if (keyStream[1] == 2)
	{
		unsigned long i = 2;
		while ((i < *keyStreamLength) && (keyStream[i] != 0)) i++;
		if ((i < 10) || (i >= (*keyStreamLength - 1))) return NULL;
		*keyStreamLength = *keyStreamLength - (++i);
		return (unsigned char*)&keyStream[i];
	}
	else
	{
		unsigned long i = 2;
		if (keyStream[i] == 0) return NULL;
		while ((i < *keyStreamLength) && (keyStream[i] == 0xFF)) i++;
		if (keyStream[i] != 0) return NULL;
		*keyStreamLength = *keyStreamLength - (++i);
		return (unsigned char*)&keyStream[i];
	}
}

// decrypt key stream
unsigned char* decryptKey6Stream(unsigned char* keyStream, unsigned long keyStreamLength, unsigned long* keyStreamDecryptedLength, unsigned long keyStreamChunks, int keyType)
{
	unsigned char* decryptedStream = (unsigned char*)ULib.HeapLibrary.allocPrivateHeap();
	int decryptedStreamOffset = 0;

	// cycle through buffer
	bool decryptionFailed = false;
	for (unsigned long i = 0; i < keyStreamLength; i += keyStreamChunks)
	{
		unsigned char* tempBuffer = decryptKey6((unsigned char*)&keyStream[i], keyStreamChunks, keyType, 0, 0);
		if (tempBuffer == NULL)
		{
			decryptionFailed = true;
			break;
		}

		unsigned long tempBufferLength = keyStreamChunks;
		//unsigned char* tempBufferOffset = determineKey6StreamOffset(tempBuffer, &tempBufferLength);
		unsigned char* tempBufferOffset = tempBuffer;
		if (tempBufferOffset == NULL)
		{
			decryptionFailed = true;
			break;
		}

		ULib.StringLibrary.copyBuffer((unsigned char*)&decryptedStream[decryptedStreamOffset], tempBufferOffset, tempBufferLength);
		decryptedStreamOffset += tempBufferLength;
		ULib.HeapLibrary.freePrivateHeap(tempBuffer);
	}

	if (keyStreamDecryptedLength != NULL) *keyStreamDecryptedLength = decryptedStreamOffset;
	if (decryptionFailed) *keyStreamDecryptedLength = 0;
	return decryptedStream;
}

//////////////////////////////
// decrypt the supplied key //
//////////////////////////////
unsigned char* decryptKey6(unsigned char* key, int keyLength, int keyType, unsigned long key1Id, unsigned long key2Id)
{
	BN_CTX* bnCtx = BN_CTX_new();
	BIGNUM* bnR1 = BN_new();
	BIGNUM* bnR2 = BN_new();
	BIGNUM* bnR3 = BN_new();

	BIGNUM* bnA = BN_new();
	BIGNUM* bnP1 = BN_new();
	BIGNUM* bnP2 = BN_new();
	BIGNUM* bnM1 = BN_new();
	BIGNUM* bnM2 = BN_new();
	BIGNUM* bnM3 = BN_new();

	// convert key buffer to BN
	if ((keyType == KEYTYPE_MASTERKEY6) || (keyType == KEYTYPE_CUSTOMINFOBYTES) || (keyType == KEYTYPE_ENTRYKEY7) || (keyType == KEYTYPE_CEDLICENCE)) BN_bin2bn(key, keyLength, bnA);
	else if (keyType == KEYTYPE_SITECODE6) BN_bin2bn((unsigned char*)&key[1], keyLength - 1, bnA);
	else if (keyType == KEYTYPE_SITEKEY6)
	{
		unsigned char key0 = key[0];
		key[0] &= 0x3F;
		BN_bin2bn(key, keyLength, bnA);
		key[0] = key0;
	}
	else return NULL;

	// key ids
	int keyId[2] = {0, 0};
	if (keyType == KEYTYPE_SITECODE6)
	{
		keyId[0] = KEYS2_V6_SITECODE_ID;
		keyId[1] = KEYS1_V6_SITECODE_ID;
	}
	else if (keyType == KEYTYPE_SITEKEY6)
	{
		keyId[0] = KEYS2_V6_SITEKEY_ID;
		keyId[1] = KEYS1_V6_SITEKEY_ID;
	}
	else if (keyType == KEYTYPE_MASTERKEY6)
	{
		keyId[0] = KEYS2_V6_MASTERKEY_ID;
		keyId[1] = KEYS1_V6_MASTERKEY_ID;
	}
	else if (keyType == KEYTYPE_ENTRYKEY7)
	{
		keyId[0] = KEYS2_V7_ENTRYKEY_ID;
		keyId[1] = KEYS1_V7_ENTRYKEY_ID;
	}
	else if (keyType == KEYTYPE_CEDLICENCE)
	{
		keyId[0] = KEYS2_V7_CEDLICENCE_ID;
		keyId[1] = KEYS1_V7_CEDLICENCE_ID;
	}
	else if (keyType == KEYTYPE_CUSTOMINFOBYTES)
	{
		keyId[0] = KEYS2_V6_CUSTOMINFOBYTES_ID;
		keyId[1] = KEYS1_V6_CUSTOMINFOBYTES_ID;
	}

	// decrypt key (custom bytes)
	if (keyType == KEYTYPE_CUSTOMINFOBYTES)
	{
		if (!getDecryptBIGNUM(keyId[0], key2Id, &bnP1, &bnM1)) return NULL;
		if (!getDecryptBIGNUM(keyId[1], key1Id, &bnP2, &bnM2)) return NULL;
		if (!getDecryptBIGNUM(KEYS3_V6_CUSTOMINFOBYTES_ID, key1Id, NULL, &bnM3)) return NULL;

		BN_mod_exp(bnR1, bnA, bnP1, bnM1, bnCtx);
		BN_mod_exp(bnR2, bnA, bnP2, bnM2, bnCtx);

		BN_mod_sub(bnR3, bnR2, bnR1, bnM2, bnCtx);
		BN_mod_mul(bnR3, bnM3, bnR3, bnM2, bnCtx);
		BN_mul(bnR3, bnR3, bnM1, bnCtx);
		BN_add(bnR2, bnR3, bnR1);
	}
	// decrypt key (entry key)
	else if (keyType == KEYTYPE_ENTRYKEY7)
	{
		if (!getDecryptBIGNUM(keyId[0], key2Id, &bnP1, &bnM1)) return NULL;
		if (!getDecryptBIGNUM(keyId[1], key1Id, &bnP2, &bnM2)) return NULL;
		if (!getDecryptBIGNUM(KEYS3_V7_ENTRYKEY_ID, key1Id, NULL, &bnM3)) return NULL;

		BN_mod_exp(bnR1, bnA, bnP1, bnM1, bnCtx);
		BN_mod_exp(bnR2, bnA, bnP2, bnM2, bnCtx);

		BN_mod_sub(bnR3, bnR2, bnR1, bnM2, bnCtx);
		BN_mod_mul(bnR3, bnM3, bnR3, bnM2, bnCtx);
		BN_mul(bnR3, bnR3, bnM1, bnCtx);
		BN_add(bnR2, bnR3, bnR1);
	}
	// decrypt key (CED licence)
	else if (keyType == KEYTYPE_CEDLICENCE)
	{
		if (!getDecryptBIGNUM(keyId[0], key2Id, &bnP1, &bnM1)) return NULL;
		if (!getDecryptBIGNUM(keyId[1], key1Id, &bnP2, &bnM2)) return NULL;
		if (!getDecryptBIGNUM(KEYS3_V7_CEDLICENCE_ID, key1Id, NULL, &bnM3)) return NULL;

		BN_mod_exp(bnR1, bnA, bnP1, bnM1, bnCtx);
		BN_mod_exp(bnR2, bnA, bnP2, bnM2, bnCtx);

		BN_mod_sub(bnR3, bnR2, bnR1, bnM2, bnCtx);
		BN_mod_mul(bnR3, bnM3, bnR3, bnM2, bnCtx);
		BN_mul(bnR3, bnR3, bnM1, bnCtx);
		BN_add(bnR2, bnR3, bnR1);
	}
	// decrypt key (other keys)
	else
	{
		if (!getDecryptBIGNUM(keyId[0], key2Id, &bnP1, &bnM1)) return NULL;
		if (!getDecryptBIGNUM(keyId[1], key1Id, &bnP2, &bnM2)) return NULL;

		BN_mod_exp(bnR1, bnA, bnP1, bnM1, bnCtx);
		BN_mod_exp(bnR2, bnR1, bnP2, bnM2, bnCtx);
	}

	// convert BN to key buffer
	int keyDecryptedLength = BN_num_bytes(bnR2);
	if (keyDecryptedLength > keyLength) keyDecryptedLength = keyLength;
	unsigned char* keyDecrypted = (unsigned char*)ULib.HeapLibrary.allocPrivateHeap();
	BN_bn2bin(bnR2, (unsigned char*)&keyDecrypted[keyLength - keyDecryptedLength]);

	BN_CTX_free(bnCtx);
	BN_free(bnR1);
	BN_free(bnR2);
	BN_free(bnR3);
	BN_free(bnA);
	BN_free(bnP1);
	BN_free(bnP2);
	BN_free(bnM1);
	BN_free(bnM2);
	BN_free(bnM3);
	return keyDecrypted;
}

//////////////////////////////
// encrypt the supplied key //
//////////////////////////////
unsigned char* encryptKey6(unsigned char* key, int keyLength, int keyType, unsigned long key1Id, unsigned long key2Id)
{
	BN_CTX* bnCtx = BN_CTX_new();
	BIGNUM* bnR1 = BN_new();
	BIGNUM* bnR2 = BN_new();
	BIGNUM* bnR3 = BN_new();

	BIGNUM* bnA = BN_new();
	BIGNUM* bnP1 = BN_new();
	BIGNUM* bnP2 = BN_new();
	BIGNUM* bnM1 = BN_new();
	BIGNUM* bnM2 = BN_new();
	BIGNUM* bnD = BN_new();

	// convert key buffer to BN
	if (keyType == KEYTYPE_SITECODE6) BN_bin2bn((unsigned char*)&key[1], keyLength - 1, bnA);
	else if (keyType == KEYTYPE_SITEKEY6) BN_bin2bn(key, keyLength, bnA);
	else return NULL;

	// key ids
	int keyId[2] = {0, 0};
	if (keyType == KEYTYPE_SITECODE6)
	{
		keyId[0] = KEYS1_V6_SITECODE_ID;
		keyId[1] = KEYS2_V6_SITECODE_ID;
	}
	else if (keyType == KEYTYPE_SITEKEY6)
	{
		keyId[0] = KEYS1_V6_SITEKEY_ID;
		keyId[1] = KEYS2_V6_SITEKEY_ID;
	}

	// encrypt key
	if (!getEncryptBIGNUM(keyId[0], key1Id, &bnP1, &bnM1)) return NULL;
	if (!getEncryptBIGNUM(keyId[1], key2Id, &bnP2, &bnM2)) return NULL;

	BN_mod_exp(bnR1, bnA, bnP1, bnM1, bnCtx);
	BN_mod_exp(bnR2, bnR1, bnP2, bnM2, bnCtx);

	// convert BN to key buffer
	int keyEncryptedLength = BN_num_bytes(bnR2);
	unsigned char* keyEncrypted = (unsigned char*)ULib.HeapLibrary.allocPrivateHeap();
	BN_bn2bin(bnR2, (unsigned char*)&keyEncrypted[keyLength - keyEncryptedLength]);

	// add seed
	BN_set_word(bnD, 4);
	BN_div(NULL, bnR3, bnR2, bnD, bnCtx);
	if (keyType == KEYTYPE_SITECODE6) keyEncrypted[0] |= (unsigned char)((keyEncrypted[keyLength - 1] & 0x3F) - 1);
	if ((keyType == KEYTYPE_SITEKEY6) || (keyType == KEYTYPE_SITECODE6)) keyEncrypted[0] |= (BN_get_word(bnR3) * 0x40);

	BN_CTX_free(bnCtx);
	BN_free(bnR1);
	BN_free(bnR2);
	BN_free(bnR3);
	BN_free(bnA);
	BN_free(bnP1);
	BN_free(bnP2);
	BN_free(bnM1);
	BN_free(bnM2);
	BN_free(bnD);
	return keyEncrypted;
}

///////////////////////////////////////////////////////////////////////
// find the decryption keys for the supplied key (also decrypts key) //
///////////////////////////////////////////////////////////////////////
unsigned char* findDecryptionKeyIds(unsigned char* key, int keyLength, int keyType, unsigned long* key1Id, unsigned long* key2Id)
{
	unsigned char* tempBuffer = NULL;

	for (*key1Id = 0; *key1Id < 0x20; (*key1Id)++)
	{
		for (*key2Id = 0; *key2Id < 0x20; (*key2Id)++)
		{
			tempBuffer = decryptKey6(key, keyLength, keyType, *key1Id, *key2Id);
			if (tempBuffer == NULL) continue;

			// site code
			if ((keyType == KEYTYPE_SITECODE6) && (isKeyCRCCorrect(tempBuffer, keyLength, ULib.StringLibrary.getWORDFromBuffer(tempBuffer, 7, true), KEYTYPE_SITECODE6)))
			{
				// encryptionSeed (0), supportedFeatures (0-7), crypkeyVersion (0x3C-0x63 [v6.0 - v9.9]), crc value
				if ((tempBuffer[0] == 0x00) &&
					((tempBuffer[1] & 0x7F) <= 7) &&
					((tempBuffer[2] & 0x7F) >= 0x3C) &&
					((tempBuffer[2] & 0x7F) <= 0x63))
				{
					return tempBuffer;
				}
			}
			// site key
			if ((keyType == KEYTYPE_SITEKEY6) && (isKeyCRCCorrect(tempBuffer, keyLength, ULib.StringLibrary.getWORDFromBuffer(tempBuffer, 11, true), KEYTYPE_SITEKEY6)))
			{
				// supportedFeatures (0-3), siteCodeId (0), crc value OR
				// supportedFeatures (0), siteCodeId (>0), crc value [if using a static key]
				if ((((tempBuffer[0] & 0x7F) <= 3) && (tempBuffer[1] == 0x00)) ||
					(((tempBuffer[0] & 0x7F) == 0) && (tempBuffer[1] > 0x00)))
				{
					return tempBuffer;
				}
			}

			ULib.HeapLibrary.freePrivateHeap(tempBuffer);
		}
	}

	return NULL;
}